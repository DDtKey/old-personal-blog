<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DDtKey's blog</title>
    <description>DDtKey's personal website &amp; blog.</description>
    <link>https://ddtkey.com/</link>
    <atom:link href="https://ddtkey.com/ru/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 21 Jun 2022 10:17:49 +0000</pubDate>
    <lastBuildDate>Tue, 21 Jun 2022 10:17:49 +0000</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>

    
      <item>
        <title>Механизмы авторизации в web-приложениях на Rust</title>
        <description>&lt;p&gt;Для обеспечения безопасности приложений мы используем такие механизмы как аутентификация и авторизация. Думаю, многие из вас знакомы с этими концепциями и в этой статье мы сфокусируемся на понятие авторизации и связанных с ней моделях контроля доступа.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img alt=&quot;security&quot; width=&quot;500&quot; src=&quot;/assets/img/posts/authz-in-rust/security.png&quot; /&gt;
&lt;/p&gt;

&lt;details&gt;
  &lt;summary&gt;&lt;b&gt;&lt;i&gt;Определения терминов, которые используются в статье&lt;/i&gt;&lt;/b&gt;&lt;/summary&gt;

  &lt;p&gt;Важно понимать отличия авторизации от аутентификации:&lt;/p&gt;

  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Аутентификация&lt;/em&gt;&lt;/strong&gt; – процесс подтверждения вашей личности и доказательства того, что вы являетесь непосредственным клиентом системы (посредством пароля, токена или любой другой формы учетных данных).&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Авторизация&lt;/em&gt;&lt;/strong&gt; в свою очередь – это механизм, в результате которого запрос к определенному ресурсу системы должен быть разрешен или отклонен.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Субъект доступа&lt;/em&gt;&lt;/strong&gt; – пользователь или процесс, который запрашивает доступ к ресурсу.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Объект доступа&lt;/em&gt;&lt;/strong&gt; – напротив, является ресурсом, к которому запрашивается доступ со стороны субъекта.&lt;/p&gt;
  &lt;/blockquote&gt;

  &lt;blockquote&gt;
    &lt;p&gt;&lt;strong&gt;&lt;em&gt;Крейт&lt;/em&gt; (&lt;em&gt;Crate&lt;/em&gt;)&lt;/strong&gt; – библиотека или исполняемая программа в Rust.&lt;/p&gt;
  &lt;/blockquote&gt;

&lt;/details&gt;

&lt;p&gt;К процессу авторизации относится понятие &lt;strong&gt;&lt;em&gt;политики контроля доступа&lt;/em&gt;&lt;/strong&gt;, в соответствии с которой и определяется набор допустимых действий конкретного пользователя (субъекта доступа) над ресурсами системы (объект доступа).&lt;/p&gt;

&lt;p&gt;А также &lt;strong&gt;&lt;em&gt;модель контроля доступа&lt;/em&gt;&lt;/strong&gt; – общая схема для разграничения доступа посредством пользовательской политики, которую мы выбираем в зависимости от различных факторов и требований к системе.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Давайте рассмотрим основные модели контроля доступа:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;DAC&lt;/strong&gt; (&lt;em&gt;Discretionary access-control&lt;/em&gt;) – избирательное (дискреционное) управление доступом&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&quot;Discretionary access-control&quot; width=&quot;200&quot; align=&quot;right&quot; src=&quot;/assets/img/posts/authz-in-rust/dac.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Данная парадигма позволяет пользователям самостоятельно передавать право на какие-либо действия над его данными другим участникам системы, для чего используются &lt;em&gt;списки контроля доступа&lt;/em&gt; (&lt;strong&gt;ACL&lt;/strong&gt;).&lt;/p&gt;

&lt;p&gt;Наиболее распространено применение в случаях, когда пользователи непосредственно владеют некими ресурсами и могут самостоятельно решать кому позволять взаимодействие с ними.&lt;/p&gt;

&lt;p&gt;Примером могут служить операционные системы или социальные сети, где люди самостоятельно меняют видимость их контента.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;MAC&lt;/strong&gt; (&lt;em&gt;Mandatory access-control&lt;/em&gt;) – мандатное управление доступом&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img alt=&quot;Discretionary access-control&quot; width=&quot;200&quot; align=&quot;left&quot; src=&quot;/assets/img/posts/authz-in-rust/mac.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Была разработана в государственных целях с акцентом на применение в чрезвычайно защищенных системах (например, военных), где и получила наибольшее распространение.&lt;/p&gt;

&lt;p&gt;Защита данных основана на метках конфиденциальности (уровень секретности или важности), с помощью которых происходит проверка наличия уровня доступа у субъектов.  Характерным также является централизованная выдача прав управляющим органом.&lt;/p&gt;

&lt;p&gt;Пожалуй, MAC одна из самых строгих и безопасных моделей, но с этим связана сложность и высокая стоимостьреализации и поддержания инфраструктуры вокруг этого решения (есть множество способов, требующих тщательного планирования).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;RBAC&lt;/strong&gt; (&lt;em&gt;Role-Based access-control&lt;/em&gt;) – управление доступом на основе ролей&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Наиболее распространенная и многим известная модель, которая хорошо накладывается на предметные бизнес-области и коррелирует с должностными функциями. Является неким развитием &lt;em&gt;DAC&lt;/em&gt;, где привилегии группируются в соответствующие им роли.&lt;/p&gt;

&lt;p&gt;Каждый субъект может обладать перечнем ролей, где роль в свою очередь может предоставлять доступ к некому перечню объектов.&lt;/p&gt;

&lt;p&gt;Следует отметить, что в рамках RBAC иногда выделяют &lt;strong&gt;PBAC&lt;/strong&gt; (&lt;em&gt;Permission-Based access-control&lt;/em&gt;) модель контроля доступа на основе разрешений, когда для каждого ресурса системы выделяется набор действий (например: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;READ_DOCUMENT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WRITE_DOCUMENT&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DELETE_DOCUMENT&lt;/code&gt;) и связывают с субъектом через соотношение с ролями, напрямую с пользователем или гибридным подходом – где субъект может обладать ролью и отдельными привилегиями.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ABAC&lt;/strong&gt; (&lt;em&gt;Attribute-Based access-control&lt;/em&gt;) – управление доступом на основе атрибутов&lt;/li&gt;
&lt;/ul&gt;

&lt;p align=&quot;center&quot;&gt;
&lt;img alt=&quot;Discretionary access-control&quot; width=&quot;500&quot; src=&quot;/assets/img/posts/authz-in-rust/abac.png&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;В данном подходе необходимо ведение специальных политик, которые объединяют атрибуты субъектов и объектов, а решение о допуске предоставляется на основе анализа и сравнительной оценки этих атрибутов.&lt;/p&gt;

&lt;p&gt;Это наиболее гибкий из описанных подходов с огромным количеством возможных комбинаций, который позволяет принимать решения на основе таких параметров, как время запроса, местоположение, должность сотрудника и т.п., но требует более детального планирования политик для предотвращения несанкционированного доступа.&lt;/p&gt;

&lt;p&gt;Для применения ABAC требуется некий механизм интерпретации политик и некого синтаксического подмножества, что может влечь за собой затраты времени исполнения (в случае динамической реализации) или компиляции (при генерации кода).&lt;/p&gt;

&lt;p&gt;Подробнее о некоторых из них можно почитать в &lt;a href=&quot;https://cheatsheetseries.owasp.org/cheatsheets/Access_Control_Cheat_Sheet.html#permission-based-access-control&quot;&gt;материалах OWASP&lt;/a&gt; (Open Web Application Security Project) и в &lt;a href=&quot;https://www.ibm.com/docs/en/sig-and-i/10.0.0?topic=planning-access-control-models&quot;&gt;документации IBM&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Контроль доступа составляет очень важную часть веб приложений, поскольку необходимо строго соблюдать разграничение доступа к ресурсам и данным в зависимости от привилегий пользователей и в особенности персональным данным, защита которых предусмотрена законодательными аспектами.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;что-мы-имеем-в-веб-фреймворках-на-rust&quot;&gt;Что мы имеем в веб-фреймворках на Rust?&lt;/h2&gt;

&lt;p&gt;Как правило, для реализации механизмов защиты от несанкционированного доступа в популярных веб-фреймворках (таких, как actix-web, Rocket или tide), используются реализации &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Middleware&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FromRequest&lt;/code&gt; или &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Guard&lt;/code&gt; (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Filter&lt;/code&gt; в случае warp).&lt;/p&gt;

&lt;p&gt;То есть в неком промежуточном ПО, где из запросов можно извлечь данные о субъекте и объекте доступа. Такой подход довольно удобен, поскольку позволят разграничить зоны ответственности.&lt;/p&gt;

&lt;p&gt;Это могут быть как библиотечные реализации в виде крейтов, так и пользовательские. Но на текущий момент, предпочтения отдают собственным реализациям, что вероятно связано с небольшим количеством готовых реализаций и спецификой применяемых политик в рамках различных проектов.&lt;/p&gt;

&lt;h3 id=&quot;casbin-rs&quot;&gt;&lt;a href=&quot;https://github.com/casbin/casbin-rs&quot;&gt;casbin-rs&lt;/a&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://github.com/casbin/casbin-rs&quot;&gt;
        &lt;img alt=&quot;casbin-rs&quot; src=&quot;/assets/img/posts/authz-in-rust/casbin.png&quot; /&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/casbin/casbin-rs/commits/master&quot;&gt;&lt;img src=&quot;https://img.shields.io/github/last-commit/casbin/casbin-rs&quot; alt=&quot;GitHub last commit&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://crates.io/crates/casbin&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/casbin.svg&quot; alt=&quot;Crates.io&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://crates.io/crates/casbin&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/d/casbin&quot; alt=&quot;crates.io&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://docs.rs/casbin&quot;&gt;&lt;img src=&quot;https://docs.rs/casbin/badge.svg&quot; alt=&quot;Docs&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://github.com/casbin/casbin-rs/actions&quot;&gt;&lt;img src=&quot;https://github.com/casbin/casbin-rs/workflows/CI/badge.svg&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://codecov.io/gh/casbin/casbin-rs&quot;&gt;&lt;img src=&quot;https://codecov.io/gh/casbin/casbin-rs/branch/master/graph/badge.svg&quot; alt=&quot;Codecov&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://gitter.im/casbin/lobby&quot;&gt;&lt;img src=&quot;https://badges.gitter.im/Join%20Chat.svg&quot; alt=&quot;Gitter&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://forum.casbin.org/&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/forum-join-%23cde201&quot; alt=&quot;forum&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Наиболее обширное production-ready решение с открытым исходным кодом, которое мне удалось найти – это адаптация Casbin (casbin-rs), с внушительным количеством поддерживаемых моделей доступа (заявлены ACL, RBAC, ABAC) и возможностью гибкого изменения политики посредством изменения только лишь конфигурационного файла.&lt;/p&gt;

&lt;p&gt;В casbin используется своя мета-модель &lt;em&gt;PERM (Policy, Effect, Request, Matchers)&lt;/em&gt; для построения модели доступа, что дает большую гибкость, но привносит затраты на ее интерпретацию и валидацию.&lt;/p&gt;

&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Request definition
&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;[request_definition]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sub, obj, act&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Policy definition
&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;[policy_definition]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;sub, obj, act&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Policy effect
&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;[policy_effect]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;some(where (p.eft == allow))&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Matchers
&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;[matchers]&lt;/span&gt;
&lt;span class=&quot;py&quot;&gt;m&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;r.sub == p.sub &amp;amp;&amp;amp; r.obj == p.obj &amp;amp;&amp;amp; r.act == p.act&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;При ее описании можно легко допустить ошибку, в связи с чем был разработан &lt;a href=&quot;https://casbin.org/editor/&quot;&gt;веб-редактор моделей&lt;/a&gt; для удобной и корректной модификации&lt;/p&gt;

&lt;p&gt;Администрирование привилегий для вашей системы происходит через описание политики (в файле или базе данных), соответствующей формату PERM модели.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;p, alice, data1, read
p, bob, data2, write
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;К сожалению, это вызывает определенное дублирование идентификаторов объектов и субъектов и неочевидность на уровне вызывающего кода.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;casbin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;prelude&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[tokio::main]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;mut&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Enforcer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;examples/acl_model.conf&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;examples/acl_policy.csv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.enable_log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;alice&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// the user that wants to access a resource.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;data1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// the resource that is going to be accessed.&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;read&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;// the operation that the user performs on the resource.&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authorized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.enforce&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;act&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authorized&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// permit alice to read data1&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;// deny the request&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;// error occurs&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Такой инструмент определенно заслуживает уважения.  Огромное спасибо сообществу, которое вносит свой вклад в его развитие!&lt;/p&gt;

&lt;p&gt;Но, как мы можем наблюдать, разработчики учитывают определенные нюансы и отсюда вытекает стремление писать собственные решения из проекта в проект, поскольку требования могут быть детерминированы изначально, а вся предоставляемая гибкость может так и не понадобиться, и следовательно, мы вольны выбирать более узкую и легковесную реализацию, подходящую под наши требования.&lt;/p&gt;

&lt;p&gt;Как это было и у меня, когда я взялся за написание backend на Rust. Мне было достаточно модели &lt;em&gt;PBAC&lt;/em&gt; и исходя из своего опыта разработки веб-приложений, в большинстве типовых проектов достаточно моделей &lt;em&gt;ACL&lt;/em&gt;/&lt;em&gt;RBAC&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;В связи с чем я пришел к идее реализации и вынесения собственного решения в качестве отдельного крейта с открытым исходным кодом: &lt;em&gt;actix-web-grants&lt;/em&gt;.&lt;/p&gt;

&lt;h3 id=&quot;actix-web-grants&quot;&gt;&lt;a href=&quot;https://github.com/DDtKey/actix-web-grants&quot;&gt;actix-web-grants&lt;/a&gt;&lt;/h3&gt;

&lt;p align=&quot;center&quot;&gt;
    &lt;a href=&quot;https://github.com/DDtKey/actix-web-grants&quot;&gt;
        &lt;img alt=&quot;actix-web-grants&quot; src=&quot;/assets/img/posts/authz-in-rust/awg.png&quot; /&gt;
    &lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/DDtKey/actix-web-grants/actions&quot;&gt;&lt;img src=&quot;https://github.com/DDtKey/actix-web-grants/workflows/CI/badge.svg&quot; alt=&quot;CI&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://crates.io/crates/actix-web-grants&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/d/actix-web-grants&quot; alt=&quot;Crates.io Downloads Badge&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://crates.io/crates/actix-web-grants&quot;&gt;&lt;img src=&quot;https://img.shields.io/crates/v/actix-web-grants&quot; alt=&quot;crates.io&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://docs.rs/actix-web-grants&quot;&gt;&lt;img src=&quot;https://docs.rs/actix-web-grants/badge.svg&quot; alt=&quot;Documentation&quot; /&gt;&lt;/a&gt;
&lt;a href=&quot;https://deps.rs/repo/github/DDtKey/actix-web-grants&quot;&gt;&lt;img src=&quot;https://deps.rs/repo/github/DDtKey/actix-web-grants/status.svg&quot; alt=&quot;dependency status&quot; /&gt;&lt;/a&gt;
&lt;img src=&quot;https://img.shields.io/crates/l/actix-web-grants&quot; alt=&quot;Apache 2.0 or MIT licensed&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Основная идея проекта состоит в использовании встроенной middleware для получения привилегий пользователей из запроса и указанию необходимых разрешений у пользователей непосредственно на ваших эндпоинтах.&lt;/p&gt;

&lt;p&gt;Это довольно легковесный крейт с простым подключением, с использованием которого можно, как минимум, применять следующие модели: списки доступа(ACL), управление доступом на основе ролей или разрешений(RBAC/PBAC).&lt;/p&gt;

&lt;p&gt;Таким образом, нам достаточно реализовать функцию получения привилегий:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;// Sample application with grant protection based on extracting by your custom function&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[actix_web::main]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;HttpServer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(||&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;GrantsMiddleware&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;with_extractor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;App&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.wrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;.service&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.bind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;localhost:8081&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;.run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;.await&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ServiceRequest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Vec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// Here is a place for your code to get user permissions/grants from a request&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;// For example from a token or database&lt;/span&gt;
    
    &lt;span class=&quot;c&quot;&gt;// Stub example&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ROLE_ADMIN&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.to_string&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()])&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Данный подход добавляет гибкости и позволяет нам реализовывать авторизацию вне зависимости от способов аутентификации и хранения привилегий пользователей: это может быть JWT-токен, база данных, промежуточный кэш или любое другое решение.&lt;/p&gt;

&lt;p&gt;После чего мы можем расставлять ограничения непосредственно над нашими ресурсами:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;actix_web_grants&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;proc_macro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_roles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[get(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/secure&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;nd&quot;&gt;#[has_roles(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ROLE_ADMIN&quot;&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;macro_secured&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HttpResponse&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nn&quot;&gt;HttpResponse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ADMIN_RESPONSE&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Возможность влиять на политику доступа напрямую в коде является отличительной частью actix-web-grants, снижая дублирование объектов доступа и предоставляя нам наглядную информацию о необходимых привилегиях.&lt;/p&gt;

&lt;p&gt;Для полноты картины, написаны минимальные примеры приложений с идентичным профилем использования и проведены замеры производительности процесса авторизации (на базе &lt;a href=&quot;https://github.com/wg/wrk&quot;&gt;wrk&lt;/a&gt;) для удовлетворения собственного интереса.&lt;/p&gt;

&lt;p&gt;Примеры написаны с упрощенной реализацией модели RBAC для двух тест-кейсов авторизации: запрос к ресурсу разрешен и отклонен, в соответствие с наличием необходимых ролей. Для аутентификации использовались заглушки. Весь код опубликован на GitHub: &lt;em&gt;&lt;a href=&quot;https://github.com/DDtKey/actix-web-authz-benchmark&quot;&gt;actix-web-authz-benchmark&lt;/a&gt;&lt;/em&gt; (больше примеров всегда можно найти на страницах самих проектов).&lt;/p&gt;

&lt;p&gt;Результаты бенчмарка можете наблюдать в таблице:&lt;/p&gt;

&lt;div class=&quot;table-responsive&quot;&gt;
    &lt;table class=&quot;table table-bordered&quot;&gt;
      &lt;tr&gt;
       &lt;td rowspan=&quot;2&quot; align=&quot;center&quot;&gt;Benchmark&lt;/td&gt;
       &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;strong&gt;casbin-rs&lt;/strong&gt;&lt;/td&gt;
       &lt;td colspan=&quot;2&quot; align=&quot;center&quot;&gt;&lt;strong&gt;actix-web-grants&lt;/strong&gt;&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
       &lt;td&gt;Latency&lt;/td&gt;
       &lt;td&gt;Req/Sec&lt;/td&gt;
       &lt;td&gt;Latency&lt;/td&gt;
       &lt;td&gt;Req/Sec&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
       &lt;td&gt;Allowed Endpoint&lt;/td&gt;
       &lt;td&gt;6.18 ms&lt;/td&gt;
       &lt;td&gt;16.27k&lt;/td&gt;
       &lt;td&gt;4.41 ms&lt;/td&gt;
       &lt;td&gt;22.69k&lt;/td&gt;
      &lt;/tr&gt;
      &lt;tr&gt;
       &lt;td&gt;Denied Endpoint&lt;/td&gt;
       &lt;td&gt;6.70 ms&lt;/td&gt;
       &lt;td&gt;14.98k&lt;/td&gt;
       &lt;td&gt;4.94 ms&lt;/td&gt;
       &lt;td&gt;20.23k&lt;/td&gt;
      &lt;/tr&gt;
    &lt;/table&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;rustc: v1.52.0 (stable); CPU: 2,6 GHz 6-Core Intel Core i7; RAM: 16 GB&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Таким образом, мы видим, что &lt;a href=&quot;https://github.com/DDtKey/actix-web-grants&quot;&gt;actix-web-grants&lt;/a&gt; позволяет более просто интегрировать и администрировать политики доступа над конечным точками (endpoint), при этом не уступает в производительности по сравнению с &lt;a href=&quot;https://github.com/casbin/casbin-rs&quot;&gt;casbin-rs&lt;/a&gt;.&lt;/p&gt;

&lt;h4 id=&quot;post-scriptum&quot;&gt;Post Scriptum&lt;/h4&gt;

&lt;p&gt;Данная библиотека пока не имеет в своём арсенале интеграций с множеством веб-фреймворков, но у меня есть планы по вынесению некоторых абстракций и написанию модулей под другие фреймворки, внесению некоторых улучшений (например, возможность наследования ролей и поддержки пользовательских типов). Буду рад любым предложениям и вкладу!&lt;/p&gt;

</description>
        <pubDate>Mon, 10 May 2021 00:00:00 +0000</pubDate>
        <link>https://ddtkey.com/blog/authz-mechanisms-in-Rust/</link>
        <guid isPermaLink="true">https://ddtkey.com/blog/authz-mechanisms-in-Rust/</guid>
      </item>
    

    
      
        
      
    
      
    
      
        
          <item>
            <title></title>
            <description>&lt;h3&gt;  {{ page.title }} &lt;/h3&gt;

&lt;div id=&quot;categories&quot;&gt;
{% for category in site.categories %}
  &lt;div class=&quot;category-box&quot; &gt;
    {% capture category_name %}{{ category | first }}{% endcapture %}
    &lt;div id=&quot;#{{ category_name | slugize }}&quot;&gt;&lt;/div&gt;
    &lt;h4 class=&quot;category-head&quot;&gt;&lt;a href=&quot;{{ site.baseurl }}/blog/categories/{{ category_name }}&quot;&gt;{{ category_name }}&lt;/a&gt;&lt;/h4&gt;
    &lt;a name=&quot;{{ category_name | slugize }}&quot;&gt;&lt;/a&gt;
     {% for post in site.categories[category_name] %}
    &lt;article class=&quot;center&quot;&gt;
      &lt;h6 &gt;&lt;a href=&quot;{{ site.baseurl }}{{ post.url }}&quot;&gt;{{post.title}}&lt;/a&gt;&lt;/h6&gt;
    &lt;/article&gt;


    {% endfor %}

  &lt;/div&gt;
{% endfor %}
&lt;/div&gt;


</description>
            <link>https://ddtkey.com/blog/categories/</link>
          </item>
        
      
    
      
    
      
    
      
    
      
    
      
        
          <item>
            <title>Get Started</title>
            <description>## Getting Started - How to use “devlopr-jekyll” theme

## What's Jekyll ?

If you aren’t familiar with Jekyll yet, you should know that it is a static site generator. It will transform your plain text into static websites and blogs. No more databases, slow loading websites, risk of being hacked…just your content. And not only that, with Jekyll you get free hosting with GitHub Pages! If you are a beginner we recommend you start with [Jekyll’s Docs](https://jekyllrb.com/docs/installation/). Now, if you know how to use Jekyll, let’s move on to using this theme in Jekyll:

### Steps to create your blog using devlopr-jekyll and Host using Github Pages :

&gt;  **Step 1.**  Fork the repo - [click here](https://github.com/sujaykundu777/devlopr-jekyll/fork)

![Devlopr Jekyll Repo](/assets/img/posts/fork1.png){:class=&quot;img-fluid&quot;}

&gt; **Step 2.** Use **your-github-username.github.io** as the new repo  ( Replace your-github-username with yours). Remember if you use the name other than your-github-username.github.io , your blog will be built using gh-pages branch.

![Devlopr Jekyll Repo](/assets/img/posts/fork2.png){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork3.png){:class=&quot;img-fluid&quot;}

&gt; **Step 3.** Clone the new repo locally to make changes :

![Devlopr Jekyll Repo](/assets/img/posts/fork31.png){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork32.png){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork33.png){:class=&quot;img-fluid&quot;}

```bash
 $ git clone https://github.com/yourusername/yourusername.github.io
 $ cd yourusername.github.io
 $ code .
```

&gt; **Step 4.** Open the files using VSCode and edit _config.yml and edit with your details:

- _config.yml file - replace with your own details
- _posts - Add your blog posts here
- _includes - You can replace the contents of the files with your data. (contains widgets)
- _assets/img - Add all your images here

![Devlopr Jekyll Repo](/assets/img/posts/fork34.png){:class=&quot;img-fluid&quot;}

&gt; **Step 5** - Install the development requirements:

### Set up local development environment

1. [Git](https://git-scm.com/)
2. [Ruby](https://www.ruby-lang.org/) and [Bundler](https://bundler.io/)
3. [VSCode](https://code.visualstudio.com/download)

We need ruby and bundler to build our site locally. After installation check if its working:

For ruby :

```bash
$ ruby -v
ruby 2.5.1p57 (2018-03-29 revision 63029) [x86_64-linux-gnu]
```
For bundler :

```bash
$ gem install bundler
$ bundler -v
Bundler version 2.2.6
```
Add jekyll :

```bash
$ bundle add jekyll
```
 This command will add the Jekyll gem to our Gemfile and install it to the ./vendor/bundle/ folder.

You can check the jekyll version

```
$ bundle exec jekyll -v
jekyll 4.2.0
```

&gt; **Step 6.** Install the gem dependencies by running the following command

```bash
$ bundle update
$ bundle install
```

&gt; **Step 7.** Serve the site locally by running the following command below:

```bash
$ bundle exec jekyll serve --watch
```
or you can also serve using :

```bash
$ jekyll serve
```

Visit [http://localhost:4000](http://localhost:4000) for development server

![Devlopr Jekyll Repo](/assets/img/posts/fork4.png){:class=&quot;img-fluid&quot;}

![Devlopr Jekyll Repo](/assets/img/posts/fork41.png){:class=&quot;img-fluid&quot;}

### Adding Content

Start populating your blog by adding your .md files in _posts. devlopr-jekyll already has a few examples.

#### YAML Post Example:

```yml
---
layout: post
title: Sample Post
author: Sujay Kundu
date: '2019-05-21 14:35:23 +0530'
category:
        - jekyll
summary: This is the summary for the sample post
thumbnail: sample.png
---

Hi ! This is sample post.

```

#### YAML Page Example:

```yml
---
layout: page
title: Sample Page
menus: header
permalink: /sample-page/
---

Hi ! This is sample page.
```

#### Editing stylesheet

You’ll only work with a single file to edit/add theme style: assets/css/main.scss.

### Deploy your Changes

Once happy with your blog changes. Push your changes to master branch.

&gt; **Step 8.** Push Your Local Changes

```bash
 $ git add .
 $ git commit -m &quot;my new blog using devlopr-jekyll&quot;
 $ git push origin master
```

Visit your Github Repo settings ! Enable master branch as Github Pages Branch :

![Devlopr Jekyll Repo](/assets/img/posts/fork6.png){:class=&quot;img-fluid&quot;}

&gt; **Step 9.** Deploy your Blog :

![Devlopr Jekyll Repo](/assets/img/posts/fork7.png){:class=&quot;img-fluid&quot;}

&gt; Congrats ! On your new shining Blog !

You can visit the blog using [http://your-github-username.github.io](http://your-github-username.github.io).

</description>
            <link>https://ddtkey.com/get-started/</link>
          </item>
        
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    
      
    

  </channel>
</rss>